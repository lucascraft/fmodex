/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.fmodex.core.ezaudio.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.fmodex.core.ezaudio.util.EzaudioAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EzaudioItemProviderAdapterFactory extends EzaudioAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EzaudioItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioSystemItemProvider audioSystemItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioSystemAdapter() {
		if (audioSystemItemProvider == null) {
			audioSystemItemProvider = new AudioSystemItemProvider(this);
		}

		return audioSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioFileItemProvider audioFileItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioFileAdapter() {
		if (audioFileItemProvider == null) {
			audioFileItemProvider = new AudioFileItemProvider(this);
		}

		return audioFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioMP3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioMP3ItemProvider audioMP3ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioMP3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioMP3Adapter() {
		if (audioMP3ItemProvider == null) {
			audioMP3ItemProvider = new AudioMP3ItemProvider(this);
		}

		return audioMP3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioWAV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioWAVItemProvider audioWAVItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioWAV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioWAVAdapter() {
		if (audioWAVItemProvider == null) {
			audioWAVItemProvider = new AudioWAVItemProvider(this);
		}

		return audioWAVItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioOGG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioOGGItemProvider audioOGGItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioOGG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioOGGAdapter() {
		if (audioOGGItemProvider == null) {
			audioOGGItemProvider = new AudioOGGItemProvider(this);
		}

		return audioOGGItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioScene} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioSceneItemProvider audioSceneItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioScene}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioSceneAdapter() {
		if (audioSceneItemProvider == null) {
			audioSceneItemProvider = new AudioSceneItemProvider(this);
		}

		return audioSceneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioProjectItemProvider audioProjectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioProjectAdapter() {
		if (audioProjectItemProvider == null) {
			audioProjectItemProvider = new AudioProjectItemProvider(this);
		}

		return audioProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioTrackItemProvider audioTrackItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioTrackAdapter() {
		if (audioTrackItemProvider == null) {
			audioTrackItemProvider = new AudioTrackItemProvider(this);
		}

		return audioTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioClip} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioClipItemProvider audioClipItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioClip}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioClipAdapter() {
		if (audioClipItemProvider == null) {
			audioClipItemProvider = new AudioClipItemProvider(this);
		}

		return audioClipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioMIDI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioMIDIItemProvider audioMIDIItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioMIDI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioMIDIAdapter() {
		if (audioMIDIItemProvider == null) {
			audioMIDIItemProvider = new AudioMIDIItemProvider(this);
		}

		return audioMIDIItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioChannelItemProvider audioChannelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioChannelAdapter() {
		if (audioChannelItemProvider == null) {
			audioChannelItemProvider = new AudioChannelItemProvider(this);
		}

		return audioChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioMixer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioMixerItemProvider audioMixerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioMixer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioMixerAdapter() {
		if (audioMixerItemProvider == null) {
			audioMixerItemProvider = new AudioMixerItemProvider(this);
		}

		return audioMixerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.Speaker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpeakerItemProvider speakerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.Speaker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpeakerAdapter() {
		if (speakerItemProvider == null) {
			speakerItemProvider = new SpeakerItemProvider(this);
		}

		return speakerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.FMDSP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FMDSPItemProvider fmdspItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.FMDSP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFMDSPAdapter() {
		if (fmdspItemProvider == null) {
			fmdspItemProvider = new FMDSPItemProvider(this);
		}

		return fmdspItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioChannelGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioChannelGroupItemProvider audioChannelGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioChannelGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioChannelGroupAdapter() {
		if (audioChannelGroupItemProvider == null) {
			audioChannelGroupItemProvider = new AudioChannelGroupItemProvider(this);
		}

		return audioChannelGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioSound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioSoundItemProvider audioSoundItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioSound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioSoundAdapter() {
		if (audioSoundItemProvider == null) {
			audioSoundItemProvider = new AudioSoundItemProvider(this);
		}

		return audioSoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioReverb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioReverbItemProvider audioReverbItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioReverb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioReverbAdapter() {
		if (audioReverbItemProvider == null) {
			audioReverbItemProvider = new AudioReverbItemProvider(this);
		}

		return audioReverbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.AudioSoundGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioSoundGroupItemProvider audioSoundGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.AudioSoundGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioSoundGroupAdapter() {
		if (audioSoundGroupItemProvider == null) {
			audioSoundGroupItemProvider = new AudioSoundGroupItemProvider(this);
		}

		return audioSoundGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.ISound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ISoundItemProvider iSoundItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.ISound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createISoundAdapter() {
		if (iSoundItemProvider == null) {
			iSoundItemProvider = new ISoundItemProvider(this);
		}

		return iSoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.FMGeometry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FMGeometryItemProvider fmGeometryItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.FMGeometry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFMGeometryAdapter() {
		if (fmGeometryItemProvider == null) {
			fmGeometryItemProvider = new FMGeometryItemProvider(this);
		}

		return fmGeometryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.IChannel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChannelItemProvider iChannelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.IChannel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIChannelAdapter() {
		if (iChannelItemProvider == null) {
			iChannelItemProvider = new IChannelItemProvider(this);
		}

		return iChannelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.Device} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceItemProvider deviceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.Device}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceAdapter() {
		if (deviceItemProvider == null) {
			deviceItemProvider = new DeviceItemProvider(this);
		}

		return deviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.fmodex.core.ezaudio.TimeTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeTagItemProvider timeTagItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.fmodex.core.ezaudio.TimeTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeTagAdapter() {
		if (timeTagItemProvider == null) {
			timeTagItemProvider = new TimeTagItemProvider(this);
		}

		return timeTagItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (audioSystemItemProvider != null) audioSystemItemProvider.dispose();
		if (audioFileItemProvider != null) audioFileItemProvider.dispose();
		if (audioMP3ItemProvider != null) audioMP3ItemProvider.dispose();
		if (audioWAVItemProvider != null) audioWAVItemProvider.dispose();
		if (audioOGGItemProvider != null) audioOGGItemProvider.dispose();
		if (audioSceneItemProvider != null) audioSceneItemProvider.dispose();
		if (audioProjectItemProvider != null) audioProjectItemProvider.dispose();
		if (audioTrackItemProvider != null) audioTrackItemProvider.dispose();
		if (audioClipItemProvider != null) audioClipItemProvider.dispose();
		if (audioMIDIItemProvider != null) audioMIDIItemProvider.dispose();
		if (audioChannelItemProvider != null) audioChannelItemProvider.dispose();
		if (audioMixerItemProvider != null) audioMixerItemProvider.dispose();
		if (speakerItemProvider != null) speakerItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (fmdspItemProvider != null) fmdspItemProvider.dispose();
		if (audioChannelGroupItemProvider != null) audioChannelGroupItemProvider.dispose();
		if (audioSoundItemProvider != null) audioSoundItemProvider.dispose();
		if (audioReverbItemProvider != null) audioReverbItemProvider.dispose();
		if (audioSoundGroupItemProvider != null) audioSoundGroupItemProvider.dispose();
		if (iSoundItemProvider != null) iSoundItemProvider.dispose();
		if (fmGeometryItemProvider != null) fmGeometryItemProvider.dispose();
		if (iChannelItemProvider != null) iChannelItemProvider.dispose();
		if (deviceItemProvider != null) deviceItemProvider.dispose();
		if (timeTagItemProvider != null) timeTagItemProvider.dispose();
	}

}
